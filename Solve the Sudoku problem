     bool isValid(vector<vector<int>> &mat, int row, int col, int num) {
        // Check the row
        for (int x = 0; x < 9; x++) {
            if (mat[row][x] == num) return false;
        }

        // Check the column
        for (int x = 0; x < 9; x++) {
            if (mat[x][col] == num) return false;
        }

        // Check the 3x3 sub-grid
        int startRow = row - row % 3, startCol = col - col % 3;
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                if (mat[i + startRow][j + startCol] == num) return false;
            }
        }

        return true;
    }
    
    
     bool solveSudokuHelper(vector<vector<int>> &mat) {
        for (int row = 0; row < 9; row++) {
            for (int col = 0; col < 9; col++) {
                if (mat[row][col] == 0) { // Empty cell found
                    for (int num = 1; num <= 9; num++) {
                        if (isValid(mat, row, col, num)) {
                            mat[row][col] = num;

                            // Recursive call
                            if (solveSudokuHelper(mat)) return true;

                            // Backtrack
                            mat[row][col] = 0;
                        }
                    }
                    return false;
                }
            }
        }
        return true;
    }
    
    // Function to find a solved Sudoku.
    void solveSudoku(vector<vector<int>> &mat) {
        // code here
        solveSudokuHelper(mat);
    }
