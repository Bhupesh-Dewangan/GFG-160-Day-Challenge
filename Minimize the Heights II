int getMinDiff(vector<int> &arr, int k) {
        int n = arr.size();
        sort(arr.begin(), arr.end());

    // Initial difference between the maximum and minimum heights
    int result = arr[n - 1] - arr[0];

    // Traverse through the array
    for (int i = 1; i < n; i++) {
        // Calculate potential max and min heights
        int max_height = max(arr[i - 1] + k, arr[n - 1] - k);
        int min_height = min(arr[0] + k, arr[i] - k);

        // Ensure min_height is non-negative
        if (min_height < 0) {
            continue;
        }

        // Update the result with the minimum difference
        result = min(result, max_height - min_height);
    }
    return result;
