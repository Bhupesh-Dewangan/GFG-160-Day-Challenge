// Function to find kth smallest element in a BST.
int kthSmallest(Node* root, int k) {
    int cnt = 0;
    
    Node* curr = root;
    while (curr != nullptr) {
        
        // If left child is null, check 
        // curr node and move to right node.
        if (curr->left == nullptr) {
            cnt++;
            
            // If curr is kth smallest node 
            if (cnt == k) return curr->data;
            
            curr = curr->right;
        }
        else {

            // Find the inorder predecessor of curr
            Node* pre = curr->left;
            while (pre->right != nullptr
                   && pre->right != curr)
                pre = pre->right;

            // Make curr as the right child of its
            // inorder predecessor and move to 
            // left node.
            if (pre->right == nullptr) {
                pre->right = curr;
                curr = curr->left;
            }

            // Revert the changes made in the 'if' part to
            // restore the original tree i.e., fix the right
            // child of predecessor
            else {
                pre->right = nullptr;
                
                cnt++;
                if (cnt == k) return curr->data;
                
                curr = curr->right;
            }
        }
    }
    
    // If k is greater than size of 
    // BST, return -1.
    return -1;
}
